name: .NET Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: postgres
          POSTGRES_DB: ventas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be fully operational..."
          until pg_isready -h localhost -U postgres
          do
            echo "PostgreSQL is still initializing. Waiting..."
            sleep 5
          done
          echo "PostgreSQL is now operational."
          
      - name: Setup .Net Core 9.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
          
      - name: Find all csproj files
        id: find-csproj
        shell: bash
        run: |
          echo "projects=$(find . -name "*.csproj" | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
      - name: Restore dependencies
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Restoring dependencies for $project"
            dotnet restore "$project"
          done
          
      - name: Build projects
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Building $project"
            dotnet build "$project" --configuration Release --no-restore
          done


      - name: install dotnet tool ef
        run: dotnet tool install --global dotnet-ef

      # - name: Run dotnet db ensure created
      #   env:
      #     CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
      #     RABBITMQ_HOST: localhost
      #     ELASTIC_URI: http://localhost:9200
      #     ELASTIC_APM_URI: http://localhost:8200
      #   run: dotnet ef database update --project experimento-hu012-ha10/Ventas/Ventas.csproj --context ApplicationDbContext --connection "${{ secrets.CONNECTIONSTRINGS__VENTAS }}"
  
          
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Test projects with coverage
        env:
          # CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
          RABBITMQ_HOST: localhost
          ELASTIC_URI: http://localhost:9200
          ELASTIC_APM_URI: http://localhost:8200
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            if [[ "$project" == *Test* ]] || [[ "$project" == *Tests* ]]; then
              echo "Testing $project with coverage"
              project_name=$(basename "$project" .csproj)
              project_dir=$(dirname "$project")
              mkdir -p TestResults
              mkdir -p CoverageResults
              
              # Find the runsettings file in the project directory
              runsettings_file=""
              if [ -f "$project_dir/coverlet.runsettings" ]; then
                runsettings_file="$project_dir/coverlet.runsettings"
              fi
              
              # Run tests with coverage
              if [ -n "$runsettings_file" ]; then
                echo "Using runsettings file: $runsettings_file"
                dotnet test "$project" --configuration Release --no-build --no-restore \
                  --logger "trx;LogFileName=TestResults/${project_name}.trx" \
                  --settings "$runsettings_file" \
                  --collect:"XPlat Code Coverage" \
                  --results-directory TestResults
              else
                echo "No runsettings file found, using default coverage settings"
                dotnet test "$project" --configuration Release --no-build --no-restore \
                  --logger "trx;LogFileName=TestResults/${project_name}.trx" \
                  --collect:"XPlat Code Coverage" \
                  --results-directory TestResults \
                  /p:CollectCoverage=true \
                  /p:CoverletOutputFormat=cobertura \
                  /p:ExcludeByFile="../StoreFlow.Usuarios.API/Program.cs%2c../StoreFlow.Usuarios.API/Migrations/20250403131236_CreacionUsuaio.cs%2c../StoreFlow.Usuarios.API/Migrations/20250403131236_CreacionUsuaio.Designer.cs%2c../StoreFlow.Usuarios.API/Migrations/20250406025023_DatosSemillaUsuarios.cs%2c../StoreFlow.Usuarios.API/Migrations/20250406025023_DatosSemillaUsuarios.Designer.cs%2c../StoreFlow.Usuarios.API/Migrations/UsuariosDbContextModelSnapshot.cs%2c**/obj/**/*.cs%2c**/Properties/**/*.cs%2c**/*.Designer.cs%2c**/*.g.cs%2c**/*.AssemblyInfo.cs" \
                  /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute%2cExcludeFromCodeCoverage" \
                  /p:IncludeDirectory="../StoreFlow.Usuarios.API"
              fi
            fi
          done

      - name: List test and coverage results
        if: always()
        run: |
          echo "Test results files:"
          find TestResults -name "*.trx" | sort
          echo "Coverage results files:"
          find TestResults -name "*.cobertura.xml" | sort

      - name: Generate coverage report
        if: always()
        run: |
          # Find all coverage files
          coverage_files=$(find TestResults -name "*.cobertura.xml" | tr '\n' ';')
          if [ -n "$coverage_files" ]; then
            echo "Generating coverage report from: $coverage_files"
            reportgenerator \
              -reports:"$coverage_files" \
              -targetdir:"CoverageResults/Report" \
              -reporttypes:"Html;Cobertura;JsonSummary;TextSummary;MarkdownSummary;DetailedBadge" \
              -classfilters:"+*" \
              -filefilters:"-*.Designer.cs;-*.g.cs;-*.AssemblyInfo.cs" \
              -verbosity:Info \
              -title:"StoreFlow.Usuarios Code Coverage" \
              -tag:$(date +"%Y%m%d_%H%M%S")
          else
            echo "No coverage files found"
          fi

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Unit Tests'
          path: '**/TestResults/*.trx'
          reporter: 'dotnet-trx'
          fail-on-error: false
          
          
      - name: Install jq
        if: always()
        run: sudo apt-get install -y jq
          
      - name: Coverage Report Summary
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Summary.json" ]; then
            echo "Coverage Summary:"
            cat CoverageResults/Report/Summary.json | jq .
          else
            echo "No coverage summary found"
          fi
          
      # Make sure the Cobertura.xml file exists before trying to publish it
      - name: Check for Cobertura.xml
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Cobertura.xml" ]; then
            echo "Cobertura.xml file found"
          else
            echo "Cobertura.xml file not found, checking for other locations..."
            find . -name "*.cobertura.xml" | sort
            # Copy any found cobertura files to the expected location
            mkdir -p CoverageResults/Report
            find . -name "*.cobertura.xml" -exec cp {} CoverageResults/Report/Cobertura.xml \; -quit
          fi

      - name: Display detailed coverage report
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Summary.md" ]; then
            echo "Detailed Coverage Report (Markdown):"
            cat CoverageResults/Report/Summary.md
          elif [ -f "CoverageResults/Report/Summary.txt" ]; then
            echo "Detailed Coverage Report (Text):"
            cat CoverageResults/Report/Summary.txt
          else
            echo "No detailed coverage report found"
          fi

      - name: Generate hierarchical coverage report
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Cobertura.xml" ]; then
            echo "Generating hierarchical coverage report..."
            
            # Create a script to parse the Cobertura XML and generate a hierarchical report
            cat > parse_coverage.sh << 'EOF'
            #!/bin/bash
            
            echo "# Code Coverage Report"
            echo ""
            echo "| Symbol | Coverage (%) | Uncovered/Total Stmts. |"
            echo "| ------ | ------------ | ---------------------- |"
            
            # Extract overall coverage from Summary.json
            if [ -f "CoverageResults/Report/Summary.json" ]; then
              total_coverage=$(grep -o '"lineCoverage":[0-9.]*' CoverageResults/Report/Summary.json | cut -d':' -f2)
              covered_lines=$(grep -o '"coveredLines":[0-9]*' CoverageResults/Report/Summary.json | cut -d':' -f2)
              total_lines=$(grep -o '"coverableLines":[0-9]*' CoverageResults/Report/Summary.json | cut -d':' -f2)
              
              # Format the total coverage line
              total_coverage_formatted=$(printf "%.0f" $(echo "$total_coverage * 100" | bc))
              echo "| 📊 Total | ${total_coverage_formatted}% | $((total_lines - covered_lines))/$total_lines |"
            fi
            
            # Extract assembly and class information
            xmllint --xpath "//packages/package" CoverageResults/Report/Cobertura.xml 2>/dev/null | 
            grep -o 'name="[^"]*"' | 
            cut -d'"' -f2 | 
            while read -r assembly; do
              # Get assembly coverage
              assembly_line_rate=$(xmllint --xpath "//packages/package[@name='$assembly']/@line-rate" CoverageResults/Report/Cobertura.xml 2>/dev/null | cut -d'"' -f2)
              assembly_coverage_formatted=$(printf "%.0f" $(echo "$assembly_line_rate * 100" | bc))
              
              # Count lines for this assembly
              assembly_lines_covered=$(xmllint --xpath "count(//packages/package[@name='$assembly']/classes/class/lines/line[@hits>0])" CoverageResults/Report/Cobertura.xml 2>/dev/null)
              assembly_lines_total=$(xmllint --xpath "count(//packages/package[@name='$assembly']/classes/class/lines/line)" CoverageResults/Report/Cobertura.xml 2>/dev/null)
              
              # Format the assembly line
              echo "| ▼ 📁 $assembly | ${assembly_coverage_formatted}% | $((assembly_lines_total - assembly_lines_covered))/$assembly_lines_total |"
              
              # Extract classes for this assembly
              xmllint --xpath "//packages/package[@name='$assembly']/classes/class" CoverageResults/Report/Cobertura.xml 2>/dev/null |
              grep -o 'name="[^"]*"' |
              cut -d'"' -f2 |
              while read -r class_full_name; do
                # Extract short class name
                class_name=$(echo "$class_full_name" | grep -o '[^.]*$')
                
                # Get class coverage
                class_line_rate=$(xmllint --xpath "//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/@line-rate" CoverageResults/Report/Cobertura.xml 2>/dev/null | cut -d'"' -f2)
                class_coverage_formatted=$(printf "%.0f" $(echo "$class_line_rate * 100" | bc))
                
                # Count lines for this class
                class_lines_covered=$(xmllint --xpath "count(//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/lines/line[@hits>0])" CoverageResults/Report/Cobertura.xml 2>/dev/null)
                class_lines_total=$(xmllint --xpath "count(//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/lines/line)" CoverageResults/Report/Cobertura.xml 2>/dev/null)
                
                # Format the class line
                echo "|   ▼ {} $class_name | ${class_coverage_formatted}% | $((class_lines_total - class_lines_covered))/$class_lines_total |"
                
                # Extract methods for this class
                xmllint --xpath "//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/methods/method" CoverageResults/Report/Cobertura.xml 2>/dev/null |
                grep -o 'name="[^"]*"' |
                cut -d'"' -f2 |
                while read -r method_name; do
                  # Skip constructors and simple properties for brevity
                  if [[ "$method_name" == ".ctor" || "$method_name" == "get_"* || "$method_name" == "set_"* ]]; then
                    continue
                  fi
                  
                  # Get method coverage
                  method_line_rate=$(xmllint --xpath "//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/methods/method[@name='$method_name']/@line-rate" CoverageResults/Report/Cobertura.xml 2>/dev/null | cut -d'"' -f2)
                  method_coverage_formatted=$(printf "%.0f" $(echo "$method_line_rate * 100" | bc))
                  
                  # Count lines for this method
                  method_lines_covered=$(xmllint --xpath "count(//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/methods/method[@name='$method_name']/lines/line[@hits>0])" CoverageResults/Report/Cobertura.xml 2>/dev/null)
                  method_lines_total=$(xmllint --xpath "count(//packages/package[@name='$assembly']/classes/class[@name='$class_full_name']/methods/method[@name='$method_name']/lines/line)" CoverageResults/Report/Cobertura.xml 2>/dev/null)
                  
                  # Format the method line
                  echo "|     ▶ 🔹 $method_name | ${method_coverage_formatted}% | $((method_lines_total - method_lines_covered))/$method_lines_total |"
                done
              done
            done
            
            echo ""
            echo "## Minimum allowed coverage is 60%"
            echo ""
            echo "Generated by [ReportGenerator](https://github.com/danielpalme/ReportGenerator)"
            EOF
            
            # Make the script executable
            chmod +x parse_coverage.sh
            
            # Run the script and save the output
            ./parse_coverage.sh > CoverageResults/Report/HierarchicalReport.md
            
            # Display the report
            if [ -f "CoverageResults/Report/HierarchicalReport.md" ]; then
              echo "Detailed Hierarchical Coverage Report:"
              cat CoverageResults/Report/HierarchicalReport.md
            fi
          else
            echo "No Cobertura.xml file found for detailed report generation"
          fi

      - name: Create custom PR comment with detailed report
        if: github.event_name == 'pull_request' && always()
        run: |
          if [ -f "CoverageResults/Report/HierarchicalReport.md" ]; then
            cp CoverageResults/Report/HierarchicalReport.md coverage-comment.md
          elif [ -f "CoverageResults/Report/Summary.md" ]; then
            echo "## StoreFlow.Usuarios Code Coverage Report" > coverage-comment.md
            echo "" >> coverage-comment.md
            echo "Minimum allowed coverage is 60%" >> coverage-comment.md
            echo "" >> coverage-comment.md
            cat CoverageResults/Report/Summary.md >> coverage-comment.md
          fi

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && always() && hashFiles('coverage-comment.md') != ''
        with:
          header: Code Coverage Report
          path: coverage-comment.md

      - name: Publish Coverage to PR
        uses: 5monkeys/cobertura-action@v12
        if: always()
        with:
          path: CoverageResults/Report/Cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 60
          show_line: true
          show_branch: true
          show_class_names: true
          fail_below_threshold: false
