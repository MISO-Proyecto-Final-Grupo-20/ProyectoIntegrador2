name: .NET Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: postgres
          POSTGRES_DB: ventas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be fully operational..."
          until pg_isready -h localhost -U postgres
          do
            echo "PostgreSQL is still initializing. Waiting..."
            sleep 5
          done
          echo "PostgreSQL is now operational."
          
      - name: Setup .Net Core 9.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
          
      - name: Find all csproj files
        id: find-csproj
        shell: bash
        run: |
          echo "projects=$(find . -name "*.csproj" | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
      - name: Restore dependencies
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Restoring dependencies for $project"
            dotnet restore "$project"
          done
          
      - name: Build projects
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Building $project"
            dotnet build "$project" --configuration Release --no-restore
          done


      - name: install dotnet tool ef
        run: dotnet tool install --global dotnet-ef

      # Remove the coverlet tool installation as we'll use the built-in collector
      
      - name: Test projects with coverage
        env:
          # CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
          RABBITMQ_HOST: localhost
          ELASTIC_URI: http://localhost:9200
          ELASTIC_APM_URI: http://localhost:8200
        run: |
          # Create the TestResults directory at the repository root
          mkdir -p TestResults
          
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            if [[ "$project" == *Test* ]] || [[ "$project" == *Tests* ]]; then
              echo "Testing $project with coverage"
              project_name=$(basename "$project" .csproj)
              
              # Run tests with coverage
              dotnet test "$project" --configuration Release --no-build --no-restore \
                --logger "trx;LogFileName=$(pwd)/TestResults/${project_name}.trx" \
                --collect:"XPlat Code Coverage" \
                --results-directory "$(pwd)/TestResults"
            fi
          done
          
          # Find and move/rename coverage files for easier processing
          echo "Processing coverage files..."
          for coverageDir in $(find TestResults -type d -name '*' | grep -v "^TestResults$"); do
            if [ -f "$coverageDir/coverage.cobertura.xml" ]; then
              dirName=$(basename "$coverageDir")
              cp "$coverageDir/coverage.cobertura.xml" "TestResults/$dirName.cobertura.xml"
              echo "Copied coverage file to TestResults/$dirName.cobertura.xml"
            fi
          done
          
          # Debug: List all files in TestResults to understand the structure
          echo "Files in TestResults directory:"
          find TestResults -type f | sort

      - name: List test results
        if: always()
        run: |
          echo "Test results files:"
          find . -name "*.trx" | sort
          echo "Coverage results files:"
          find . -name "*.cobertura.xml" | sort

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Unit Tests'
          path: '**/TestResults/*.trx'
          reporter: 'dotnet-trx'
          fail-on-error: false
          
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
          
      - name: Generate Coverage Report
        if: always()
        run: |
          reportgenerator -reports:"TestResults/*.cobertura.xml" -targetdir:"TestResults/CoverageReport" -reporttypes:Html
          
      - name: Archive Code Coverage Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: TestResults/CoverageReport
          
      - name: Publish Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: always()
        with:
          filename: "TestResults/*.cobertura.xml"
          badge: true
          format: markdown
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
