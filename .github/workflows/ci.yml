name: .NET Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: postgres
          POSTGRES_DB: ventas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be fully operational..."
          until pg_isready -h localhost -U postgres
          do
            echo "PostgreSQL is still initializing. Waiting..."
            sleep 5
          done
          echo "PostgreSQL is now operational."
          
      - name: Setup .Net Core 9.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
          
      - name: Find all csproj files
        id: find-csproj
        shell: bash
        run: |
          echo "projects=$(find . -name "*.csproj" | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
      - name: Restore dependencies
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Restoring dependencies for $project"
            dotnet restore "$project"
          done
          
      - name: Build projects
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Building $project"
            dotnet build "$project" --configuration Release --no-restore
          done


      - name: install dotnet tool ef
        run: dotnet tool install --global dotnet-ef

      # - name: Run dotnet db ensure created
      #   env:
      #     CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
      #     RABBITMQ_HOST: localhost
      #     ELASTIC_URI: http://localhost:9200
      #     ELASTIC_APM_URI: http://localhost:8200
      #   run: dotnet ef database update --project experimento-hu012-ha10/Ventas/Ventas.csproj --context ApplicationDbContext --connection "${{ secrets.CONNECTIONSTRINGS__VENTAS }}"
  
          
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Test projects with coverage
        env:
          # CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
          RABBITMQ_HOST: localhost
          ELASTIC_URI: http://localhost:9200
          ELASTIC_APM_URI: http://localhost:8200
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            if [[ "$project" == *Test* ]] || [[ "$project" == *Tests* ]]; then
              echo "Testing $project with coverage"
              project_name=$(basename "$project" .csproj)
              project_dir=$(dirname "$project")
              mkdir -p TestResults
              mkdir -p CoverageResults
              
              # Find the runsettings file in the project directory
              runsettings_file=""
              if [ -f "$project_dir/coverlet.runsettings" ]; then
                runsettings_file="$project_dir/coverlet.runsettings"
              fi
              
              # Run tests with coverage
              if [ -n "$runsettings_file" ]; then
                echo "Using runsettings file: $runsettings_file"
                dotnet test "$project" --configuration Release --no-build --no-restore \
                  --logger "trx;LogFileName=TestResults/${project_name}.trx" \
                  --settings "$runsettings_file" \
                  --collect:"XPlat Code Coverage" \
                  --results-directory TestResults
              else
                echo "No runsettings file found, using default coverage settings"
                dotnet test "$project" --configuration Release --no-build --no-restore \
                  --logger "trx;LogFileName=TestResults/${project_name}.trx" \
                  --collect:"XPlat Code Coverage" \
                  --results-directory TestResults \
                  /p:CollectCoverage=true \
                  /p:CoverletOutputFormat=cobertura \
                  /p:ExcludeByFile="../StoreFlow.Usuarios.API/Program.cs%2c../StoreFlow.Usuarios.API/Migrations/**/*.cs%2c**/obj/**/*.cs%2c**/Properties/**/*.cs%2c**/*.Designer.cs%2c**/*.g.cs%2c**/*.AssemblyInfo.cs" \
                  /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute" \
                  /p:IncludeDirectory="../StoreFlow.Usuarios.API"
              fi
            fi
          done

      - name: List test and coverage results
        if: always()
        run: |
          echo "Test results files:"
          find TestResults -name "*.trx" | sort
          echo "Coverage results files:"
          find TestResults -name "*.cobertura.xml" | sort

      - name: Generate coverage report
        if: always()
        run: |
          # Find all coverage files
          coverage_files=$(find TestResults -name "*.cobertura.xml" | tr '\n' ';')
          if [ -n "$coverage_files" ]; then
            echo "Generating coverage report from: $coverage_files"
            reportgenerator \
              -reports:"$coverage_files" \
              -targetdir:"CoverageResults/Report" \
              -reporttypes:"Html;Cobertura;JsonSummary"
          else
            echo "No coverage files found"
          fi

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Unit Tests'
          path: '**/TestResults/*.trx'
          reporter: 'dotnet-trx'
          fail-on-error: false
          
          
      - name: Install jq
        if: always()
        run: sudo apt-get install -y jq
          
      - name: Coverage Report Summary
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Summary.json" ]; then
            echo "Coverage Summary:"
            cat CoverageResults/Report/Summary.json | jq .
          else
            echo "No coverage summary found"
          fi
          
      - name: Publish Coverage to PR
        uses: 5monkeys/cobertura-action@v12
        if: github.event_name == 'pull_request' && always()
        with:
          path: CoverageResults/Report/Cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 60
          show_line: true
          show_branch: true
