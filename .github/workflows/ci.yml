name: .NET Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: postgres
          POSTGRES_DB: ventas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be fully operational..."
          until pg_isready -h localhost -U postgres
          do
            echo "PostgreSQL is still initializing. Waiting..."
            sleep 5
          done
          echo "PostgreSQL is now operational."
          
      - name: Setup .Net Core 9.0.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
          
      - name: Find all csproj files
        id: find-csproj
        shell: bash
        run: |
          echo "projects=$(find . -name "*.csproj" | tr '\n' ' ')" >> $GITHUB_OUTPUT
          
      - name: Restore dependencies
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Restoring dependencies for $project"
            dotnet restore "$project"
          done
          
      - name: Build projects
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            echo "Building $project"
            dotnet build "$project" --configuration Release --no-restore
          done


      - name: install dotnet tool ef
        run: dotnet tool install --global dotnet-ef

      # - name: Run dotnet db ensure created
      #   env:
      #     CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
      #     RABBITMQ_HOST: localhost
      #     ELASTIC_URI: http://localhost:9200
      #     ELASTIC_APM_URI: http://localhost:8200
      #   run: dotnet ef database update --project experimento-hu012-ha10/Ventas/Ventas.csproj --context ApplicationDbContext --connection "${{ secrets.CONNECTIONSTRINGS__VENTAS }}"
  
          
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Test projects with coverage
        env:
          # CONNECTION_STRING: ${{ secrets.CONNECTIONSTRINGS__VENTAS }}
          RABBITMQ_HOST: localhost
          ELASTIC_URI: http://localhost:9200
          ELASTIC_APM_URI: http://localhost:8200
        run: |
          for project in ${{ steps.find-csproj.outputs.projects }}; do
            if [[ "$project" == *Test* ]] || [[ "$project" == *Tests* ]]; then
              echo "Testing $project with coverage"
              project_name=$(basename "$project" .csproj)
              project_dir=$(dirname "$project")
              mkdir -p TestResults
              mkdir -p CoverageResults
              
              # Find the runsettings file in the project directory
              runsettings_file=""
              if [ -f "$project_dir/coverlet.runsettings" ]; then
                runsettings_file="$project_dir/coverlet.runsettings"
              fi
              
              # Run tests with coverage
              if [ -n "$runsettings_file" ]; then
                echo "Using runsettings file: $runsettings_file"
                dotnet test "$project" --configuration Release --no-build --no-restore \
                  --logger "trx;LogFileName=TestResults/${project_name}.trx" \
                  --settings "$runsettings_file" \
                  --collect:"XPlat Code Coverage" \
                  --results-directory TestResults
              else
                echo "No runsettings file found, using default coverage settings"
                dotnet test "$project" --configuration Release --no-build --no-restore \
                  --logger "trx;LogFileName=TestResults/${project_name}.trx" \
                  --collect:"XPlat Code Coverage" \
                  --results-directory TestResults \
                  /p:CollectCoverage=true \
                  /p:CoverletOutputFormat=cobertura \
                  /p:ExcludeByFile="../StoreFlow.Usuarios.API/Program.cs%2c../StoreFlow.Usuarios.API/Migrations/20250403131236_CreacionUsuaio.cs%2c../StoreFlow.Usuarios.API/Migrations/20250403131236_CreacionUsuaio.Designer.cs%2c../StoreFlow.Usuarios.API/Migrations/20250406025023_DatosSemillaUsuarios.cs%2c../StoreFlow.Usuarios.API/Migrations/20250406025023_DatosSemillaUsuarios.Designer.cs%2c../StoreFlow.Usuarios.API/Migrations/UsuariosDbContextModelSnapshot.cs%2c**/obj/**/*.cs%2c**/Properties/**/*.cs%2c**/*.Designer.cs%2c**/*.g.cs%2c**/*.AssemblyInfo.cs" \
                  /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute%2cExcludeFromCodeCoverage" \
                  /p:IncludeDirectory="../StoreFlow.Usuarios.API"
              fi
            fi
          done

      - name: List test and coverage results
        if: always()
        run: |
          echo "Test results files:"
          find TestResults -name "*.trx" | sort
          echo "Coverage results files:"
          find TestResults -name "*.cobertura.xml" | sort

      - name: Generate coverage report
        if: always()
        run: |
          # Find all coverage files
          coverage_files=$(find TestResults -name "*.cobertura.xml" | tr '\n' ';')
          if [ -n "$coverage_files" ]; then
            echo "Generating coverage report from: $coverage_files"
            reportgenerator \
              -reports:"$coverage_files" \
              -targetdir:"CoverageResults/Report" \
              -reporttypes:"Html;HtmlSummary;HtmlChart;Cobertura;JsonSummary;TextSummary;MarkdownSummary" \
              -classfilters:"+*" \
              -filefilters:"-*.Designer.cs;-*.g.cs;-*.AssemblyInfo.cs" \
              -verbosity:Info \
              -title:"StoreFlow.Usuarios Code Coverage"
          else
            echo "No coverage files found"
          fi

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Unit Tests'
          path: '**/TestResults/*.trx'
          reporter: 'dotnet-trx'
          fail-on-error: false
          
          
      - name: Install jq
        if: always()
        run: sudo apt-get install -y jq
          
      - name: Coverage Report Summary
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Summary.json" ]; then
            echo "Coverage Summary:"
            cat CoverageResults/Report/Summary.json | jq .
          else
            echo "No coverage summary found"
          fi
          
      # Make sure the Cobertura.xml file exists before trying to publish it
      - name: Check for Cobertura.xml
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Cobertura.xml" ]; then
            echo "Cobertura.xml file found"
          else
            echo "Cobertura.xml file not found, checking for other locations..."
            find . -name "*.cobertura.xml" | sort
            # Copy any found cobertura files to the expected location
            mkdir -p CoverageResults/Report
            find . -name "*.cobertura.xml" -exec cp {} CoverageResults/Report/Cobertura.xml \; -quit
          fi

      - name: Display detailed coverage report
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Summary.md" ]; then
            echo "Detailed Coverage Report (Markdown):"
            cat CoverageResults/Report/Summary.md
          elif [ -f "CoverageResults/Report/Summary.txt" ]; then
            echo "Detailed Coverage Report (Text):"
            cat CoverageResults/Report/Summary.txt
          else
            echo "No detailed coverage report found"
          fi

      - name: Generate hierarchical coverage report
        if: always()
        run: |
          if [ -f "CoverageResults/Report/Cobertura.xml" ]; then
            echo "Generating hierarchical coverage report..."
            
            # Install required tools
            sudo apt-get update
            sudo apt-get install -y libxml2-utils bc jq
            
            # Create a detailed markdown report
            echo "# Code Coverage Report" > CoverageResults/Report/HierarchicalReport.md
            echo "" >> CoverageResults/Report/HierarchicalReport.md
            echo "| Symbol | Coverage (%) | Uncovered/Total Stmts. |" >> CoverageResults/Report/HierarchicalReport.md
            echo "| ------ | ------------ | ---------------------- |" >> CoverageResults/Report/HierarchicalReport.md
            
            # Extract summary information from Summary.json
            if [ -f "CoverageResults/Report/Summary.json" ]; then
              line_coverage=$(grep -o '"lineCoverage":[0-9.]*' CoverageResults/Report/Summary.json | cut -d':' -f2)
              covered_lines=$(grep -o '"coveredLines":[0-9]*' CoverageResults/Report/Summary.json | cut -d':' -f2)
              total_lines=$(grep -o '"coverableLines":[0-9]*' CoverageResults/Report/Summary.json | cut -d':' -f2)
              
              # Calculate percentage and format
              coverage_pct=$(echo "$line_coverage * 100" | bc | xargs printf "%.0f")
              uncovered=$((total_lines - covered_lines))
              
              # Add total row
              echo "| 📊 Total | ${coverage_pct}% | ${uncovered}/${total_lines} |" >> CoverageResults/Report/HierarchicalReport.md
              
              # Process assemblies, classes, and methods
              jq -c '.assemblies[]' CoverageResults/Report/Summary.json | while read -r assembly; do
                assembly_name=$(echo $assembly | jq -r '.name')
                assembly_coverage=$(echo $assembly | jq -r '.coverage')
                assembly_covered=$(echo $assembly | jq -r '.coveredLines')
                assembly_total=$(echo $assembly | jq -r '.coverableLines')
                assembly_coverage_pct=$(echo "$assembly_coverage" | xargs printf "%.0f")
                
                # Add assembly row
                echo "| ▼ 📁 $assembly_name | ${assembly_coverage_pct}% | $((assembly_total - assembly_covered))/$assembly_total |" >> CoverageResults/Report/HierarchicalReport.md
                
                # Process classes
                echo $assembly | jq -c '.classes[]' 2>/dev/null | while read -r class; do
                  class_name=$(echo $class | jq -r '.name')
                  class_coverage=$(echo $class | jq -r '.coverage')
                  class_covered=$(echo $class | jq -r '.coveredLines')
                  class_total=$(echo $class | jq -r '.coverableLines')
                  class_coverage_pct=$(echo "$class_coverage" | xargs printf "%.0f")
                  
                  # Extract short class name (remove namespace)
                  short_class_name=$(echo $class_name | grep -o '[^.]*$')
                  
                  # Add class row
                  echo "|   ▼ {} $short_class_name | ${class_coverage_pct}% | $((class_total - class_covered))/$class_total |" >> CoverageResults/Report/HierarchicalReport.md
                  
                  # Process methods
                  echo $class | jq -c '.methods[]' 2>/dev/null | while read -r method; do
                    method_name=$(echo $method | jq -r '.name')
                    method_coverage=$(echo $method | jq -r '.coverage')
                    method_covered=$(echo $method | jq -r '.coveredLines')
                    method_total=$(echo $method | jq -r '.coverableLines')
                    method_coverage_pct=$(echo "$method_coverage" | xargs printf "%.0f")
                    
                    # Skip constructors and simple properties
                    if [[ "$method_name" == *".ctor"* || "$method_name" == *"get_"* || "$method_name" == *"set_"* ]]; then
                      continue
                    fi
                    
                    # Extract short method name (remove class name)
                    short_method_name=$(echo $method_name | grep -o '[^.]*$')
                    
                    # Add method row
                    echo "|     ▶ 🔹 $short_method_name | ${method_coverage_pct}% | $((method_total - method_covered))/$method_total |" >> CoverageResults/Report/HierarchicalReport.md
                  done
                done
              done
            fi
            
            # Add footer
            echo "" >> CoverageResults/Report/HierarchicalReport.md
            echo "## Minimum allowed coverage is 60%" >> CoverageResults/Report/HierarchicalReport.md
            echo "" >> CoverageResults/Report/HierarchicalReport.md
            echo "Generated by [ReportGenerator](https://github.com/danielpalme/ReportGenerator)" >> CoverageResults/Report/HierarchicalReport.md
            
            # Display the report
            echo "Detailed Hierarchical Coverage Report:"
            cat CoverageResults/Report/HierarchicalReport.md
          else
            echo "No Cobertura.xml file found for detailed report generation"
          fi

      - name: Create custom PR comment with detailed report
        if: github.event_name == 'pull_request' && always()
        run: |
          if [ -f "CoverageResults/Report/HierarchicalReport.md" ]; then
            cp CoverageResults/Report/HierarchicalReport.md coverage-comment.md
          elif [ -f "CoverageResults/Report/Summary.md" ]; then
            echo "## StoreFlow.Usuarios Code Coverage Report" > coverage-comment.md
            echo "" >> coverage-comment.md
            echo "Minimum allowed coverage is 60%" >> coverage-comment.md
            echo "" >> coverage-comment.md
            cat CoverageResults/Report/Summary.md >> coverage-comment.md
          fi

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && always() && hashFiles('coverage-comment.md') != ''
        with:
          header: Code Coverage Report
          path: coverage-comment.md

      - name: Publish Coverage to PR
        uses: 5monkeys/cobertura-action@v12
        if: always()
        with:
          path: CoverageResults/Report/Cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 60
          show_line: true
          show_branch: true
          show_class_names: true
          fail_below_threshold: false
