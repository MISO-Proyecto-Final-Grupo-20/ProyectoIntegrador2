services:
  dbusuarios:
    image: postgres:15
    container_name: dbusuarios
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: usuarios
    ports:
        - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  usuarios:
    build: 
      context: Backend
      dockerfile: StoreFlow.Usuarios/StoreFlow.Usuarios.API/Dockerfile 
    env_file:
      - .env
    ports:
      - '8090:8080' 
    depends_on:
      dbusuarios:
        condition: service_healthy

  dbcompras:
    image: postgres
    container_name: dbcompras
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: compras
    ports:
        - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  compras:
    build: 
      context: Backend/StoreFlow.Compras
      dockerfile: StoreFlow.Compras.API/Dockerfile 
    env_file:
      - .env
    ports:
      - '8091:8080' 
    depends_on:
      dbcompras:
        condition: service_healthy

  dbventas:
    image: postgres
    container_name: dbventas
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ventas
    ports:
        - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5      
  
  ventas:
    build: 
      context: Backend
      dockerfile: StoreFlow.Ventas/StoreFlow.Ventas.API/Dockerfile 
    env_file:
      - .env
    ports:
      - '8092:8080' 
    depends_on:
      dbventas:
        condition: service_healthy

  dbinventarios:
    image: postgres
    container_name: dbinventarios
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventarios
    ports:
        - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  inventarios:
    build: 
      context: Backend
      dockerfile: StoreFlow.Inventarios/StoreFlow.Inventarios.API/Dockerfile 
    env_file:
      - .env
    ports:
      - '8093:8080' 
    depends_on:
      dbinventarios:
        condition: service_healthy

  dblogistica:
    image: postgres
    container_name: dblogistica
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: logistica
    ports:
        - "5437:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  logisitca:
    build: 
      context: Backend
      dockerfile: StoreFlow.Logistica/StoreFlow.Logistica.API/Dockerfile 
    env_file:
      - .env
    ports:
      - '8094:8080' 
    depends_on:
      dblogistica:
        condition: service_healthy
    
  mobileapp:
    build:
      context: ./UI
      dockerfile: apps/mobile/Dockerfile
      args:
        ENVIRONMENT: development
    ports:
      - '3100:80'
    depends_on:
      - 'usuarios'

  web:
    build:
      context: ./UI
      dockerfile: apps/web/Dockerfile
      args:
        ENVIRONMENT: development
    ports:
      - "3000:80"

  gateway:
    build:
      context: ./Gateway
    ports:
      - "8099:80"
    depends_on:
      - usuarios
      - compras
      - ventas
      - inventarios

  aspire-dashboard:
    container_name: aspire-dashboard
    image: mcr.microsoft.com/dotnet/aspire-dashboard
    ports:
      - "18888:18888"
      - "4317:18889"
    environment:
      - DOTNET_DASHBOARD_UNSECURED_ALLOW_ANONYMOUS=true
    restart: unless-stopped

  rabbitmq:
    image: "rabbitmq:4-management"
    ports:
      - "15672:15672"